import re
from datetime import datetime
from typing import (
    List,
    Optional,
)

from src.converters import normalize_string

_PATTERN_FILE = r'\[(?P<alias>[^\]]*)\]\((?P<path>\./file/[^\]\n]+)\)'
REGEX_FILE: re.Pattern[str] = re.compile(_PATTERN_FILE)

_PATTERN_IMAGE = r'!\[(?P<alias>[^\]]*)\]\((?P<path>image/[^\]\n]+)\)'
REGEX_IMAGE: re.Pattern[str] = re.compile(_PATTERN_IMAGE)

_PATTERN_TITLE = r'title: \"(?P<title>.+)\"$'
_REGEX_TITLE: re.Pattern[str] = re.compile(_PATTERN_TITLE, re.MULTILINE)

_PATTERN_DATE = "date: \\'(?P<date>[^\\']+)"
REGEX_DATE: re.Pattern[str] = re.compile(_PATTERN_DATE)

_PATTERN_UPDATED_AT = "updated_at: \\'(?P<date>[^\\']+)"
REGEX_UPDATED_AT: re.Pattern[str] = re.compile(_PATTERN_UPDATED_AT)

_PATTERN_URL = r'url: (?P<url>.+)'
_REGEX_URL: re.Pattern[str] = re.compile(_PATTERN_URL)

_PATTERNS_NOTE_LINK = [
    # evernote:///view/${EVERNOTE_USER_ID}/s17/${ID}/9a2e1109-42e1-4593-9745-e266403ad406/
    r'\[(?P<label>[^\]]+)\]\((?P<url>evernote:///view/([^/]+/){2}(?P<id>[^/]{36})/([^/]{36}/?))',
    # https://www.evernote.com/shard/s17/nl/${EVERNOTE_USER_ID}/${ID}
    r'\[(?P<label>[^\]]+)\]\((?P<url>https://www\.evernote\.com/shard/([^/]+/){3}(?P<id>[^\)]{36}))',
    # https://share.evernote.com/note/${ID}
    r'\[(?P<label>[^\]]+)\]\((?P<url>https://share\.evernote\.com/note/(?P<id>[a-f0-9\-]{36}))',
]
"""Patterns for note links as generated by Evernote."""
REGEXES_NOTE_LINK: List[re.Pattern[str]] = [re.compile(pattern) for pattern in _PATTERNS_NOTE_LINK]

_PATTERN_NOTE_LINK = r'\[(?P<label>[^\]]+)\]\((?P<container>\./.+\.md)\)'
"""Patterns for migrated note links."""
_REGEX_NOTE_LINK = re.compile(_PATTERN_NOTE_LINK)


def extract_title(content: str) -> Optional[str]:
    """
    Extract the title from a note.

    Args:
        content (str): The content of the note.
    """
    if match := _REGEX_TITLE.search(content):
        value = match['title']
        return normalize_string(value)

    return None


def extract_date(
    regex: re.Pattern[str],
    content: str,
) -> Optional[datetime]:
    """
    Extract a date from a note.

    Args:
        regex (re.Pattern[str]): The regular expression to use for the extraction.
        content (str): The content of the note.
    """
    if match := regex.search(content):
        value = match['date']
        return datetime.strptime(value, '%Y-%m-%d %H:%M:%S %z')

    return None


def extract_url(content: str) -> Optional[str]:
    """
    Extract the URL from a note.

    Args:
        content (str): The content of the note.
    """
    if match := _REGEX_URL.search(content):
        return match['url']

    return None


def extract_notes_links(content: str) -> List[str]:
    """
    Extract the links to notes from a note.

    Args:
        content (str): The content of the note.
    """
    return [match['container'] for match in _REGEX_NOTE_LINK.finditer(content)]
